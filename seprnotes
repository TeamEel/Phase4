App.java:
    Starts the game and waits for a GameOverException

GameState.java:
    Enum for if the game is running or not

Game.java:
    Creates a TerminalRenderer & Reader & Interface
    Creates a Simulator
    
    Initialising the game starts it
    Shows the welcome message + asks for a username
    Then show a menu choice for load/new game


PERSISTENCE:

FileSystem.java:
    Gets the system save path + creates directory structure
    Lists save games

    Writes and reads strings to and from files

Persistance.java:
    Serializes plant objects to and from files.

SaveGame.java:
    Stores game information
    Saves and loads it to files using persistence

Utils.java:
    Reads a file from a path


SIMULATOR:

Bernoulli.java:
    Gets various elements from equations

Connection.java:
    Defines connections between parts of the plant
    If it is open, sets out values to in values
    Otherwise, set them to default values

FuelPile.java:
    Gets and sets the control rod positions, and gets the output

PlantStatus.java:
    Interface for getting and setting values from the plant

Simulator.java:
    Main class of the simulator. Brings together the physical model and the failure model.

    Step() steps the failure model (which then presumably calls the physical model).

    Also has a bunch of getters and setters which change various things directly through the
    failure models.

    (and also gets things)

Port.java:
    Actual ports - connections have 2 of these
    Has a few different values to use

Turbine.java:
    Holds data to do with the turbine.
    Step() updates based on whether it has failed and associated values.

FailableComponent.java:
    Inheritable abstract class holds hasFailed(), fail(), etc.
    Also defines stepWear - wear is a %, higher the wear the higher the chance the
    component will fail.

Valve.java:
    Get and set open

Condenser.java:
    Defines its ports and its step operation

